name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    name: Run Backend and Frontend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: secrets.POSTGRES_USER
          POSTGRES_PASSWORD: secrets.POSTGRES_PASSWORD
          POSTGRES_DB: secrets.POSTGRES_DB
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install backend deps
        working-directory: backend
        run: npm ci

      - name: Prepare backend database (migrations)
        working-directory: backend
        env:
          DATABASE_URL: secrets.POSTGRES_DB_URL
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: Run backend tests
        working-directory: backend
        env:
          DATABASE_URL: secrets.POSTGRES_DB_URL
          JWT_SECRET: secrets.JWT_SECRET
          JWT_REFRESH_SECRET: secrets.JWT_REFRESH_SECRET
        run: npm test -- --run

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --run

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: tests
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Build backend
        working-directory: backend
        run: |
          npm ci
          npm run build

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      # - name: Deploy
      #   run: |
      #     echo "Add your deployment steps here (e.g., Docker push, kubectl, etc.)"

name: CI - Build and Deploy FE/BE

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}-backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository }}-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (backend)
        id: meta-be
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Extract metadata (frontend)
        id: meta-fe
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push Backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.deploy
          push: true
          tags: ${{ steps.meta-be.outputs.tags }}
          labels: ${{ steps.meta-be.outputs.labels }}
          cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.deploy
          push: true
          tags: ${{ steps.meta-fe.outputs.tags }}
          labels: ${{ steps.meta-fe.outputs.labels }}
          build-args: |
            VITE_GRAPHQL_URL=${{ secrets.FE_GRAPHQL_HTTP_URL }}
            VITE_GRAPHQL_WS_URL=${{ secrets.FE_GRAPHQL_WS_URL }}
          cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache,mode=max

      - name: Trigger Render Backend Deploy
        if: ${{ success() && secrets.RENDER_WEBHOOK_BACKEND_URL != '' }}
        run: |
          curl -fsSL -X POST "${{ secrets.RENDER_WEBHOOK_BACKEND_URL }}"

      - name: Trigger Render Frontend Deploy
        if: ${{ success() && secrets.RENDER_WEBHOOK_FRONTEND_URL != '' }}
        run: |
          curl -fsSL -X POST "${{ secrets.RENDER_WEBHOOK_FRONTEND_URL }}"



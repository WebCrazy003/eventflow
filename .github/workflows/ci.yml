name: CI - Build and Deploy FE/BE

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  POSTGRES_DB_URL: postgresql://root:password@localhost:5432/eventflow

jobs:
  tests:
    name: Run Backend and Frontend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
          POSTGRES_DB: eventflow
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend deps
        working-directory: backend
        run: npm ci

      - name: Prepare backend database (migrations)
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.POSTGRES_DB_URL }}
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: Run backend tests
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.POSTGRES_DB_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        run: npm test

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --run

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: tests
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute lowercase image names
        run: |
          echo "BACKEND_IMAGE=ghcr.io/${GITHUB_REPOSITORY,,}-backend" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=ghcr.io/${GITHUB_REPOSITORY,,}-frontend" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (backend)
        id: meta-be
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Extract metadata (frontend)
        id: meta-fe
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push Backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile.deploy
          push: true
          tags: ${{ steps.meta-be.outputs.tags }}
          labels: ${{ steps.meta-be.outputs.labels }}
          cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.deploy
          push: true
          tags: ${{ steps.meta-fe.outputs.tags }}
          labels: ${{ steps.meta-fe.outputs.labels }}
          build-args: |
            VITE_GRAPHQL_URL=${{ secrets.FE_GRAPHQL_HTTP_URL }}
            VITE_GRAPHQL_WS_URL=${{ secrets.FE_GRAPHQL_WS_URL }}
          cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache,mode=max

      - name: Trigger Render Backend Deploy
        if: ${{ success() && env.RENDER_WEBHOOK_BACKEND_URL != '' }}
        env:
          RENDER_WEBHOOK_BACKEND_URL: ${{ secrets.RENDER_WEBHOOK_BACKEND_URL }}
        run: |
          curl -fsSL -X POST "${RENDER_WEBHOOK_BACKEND_URL}"

      - name: Trigger Render Frontend Deploy
        if: ${{ success() && env.RENDER_WEBHOOK_FRONTEND_URL != '' }}
        env:
          RENDER_WEBHOOK_FRONTEND_URL: ${{ secrets.RENDER_WEBHOOK_FRONTEND_URL }}
        run: |
          curl -fsSL -X POST "${RENDER_WEBHOOK_FRONTEND_URL}"

  acceptance-tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            backend/package-lock.json

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Wait for Backend to be ready
        run: |
          echo "Waiting for backend to be ready..."
          BACKEND_URL="https://eventflow-backend-latest.onrender.com"
          MAX_ATTEMPTS=60
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            if curl -sf "${BACKEND_URL}/health" | jq -e '.status == "OK"' >/dev/null 2>&1; then
              echo "✓ Backend is ready!"
              exit 0
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Backend not ready yet, waiting 10 seconds..."
            sleep 10
          done
          
          echo "❌ Backend did not become ready within $((MAX_ATTEMPTS * 10)) seconds"
          exit 1

      - name: Wait for Frontend to be ready
        run: |
          echo "Waiting for frontend to be ready..."
          FRONTEND_URL="https://eventflow-frontend-latest.onrender.com"
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${FRONTEND_URL}" || echo "000")
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ]; then
              echo "✓ Frontend is ready!"
              exit 0
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Frontend not ready yet (HTTP $HTTP_CODE), waiting 10 seconds..."
            sleep 10
          done
          
          echo "⚠ Frontend did not become ready, but continuing with acceptance tests..."

      - name: Install graphql-ws and ws (for subscription client)
        run: |
          cd test
          npm init -y --silent
          npm install graphql-ws ws --no-save --silent || echo "Warning: Could not install graphql-ws/ws"

      - name: Run Acceptance Tests
        run: |
          chmod +x test/acceptance.sh
          bash test/acceptance.sh
